// <auto-generated />
using System;
using FormBuilderDB.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FormBuilderDB.Migrations
{
    [DbContext(typeof(FormBuilderContext))]
    [Migration("20230903223436_dbmigration")]
    partial class dbmigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FormBuilderDB.Models.FormFieldResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FormDataId")
                        .HasColumnType("int");

                    b.Property<string>("Response")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ResponseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FormDataId");

                    b.HasIndex("ResponseId");

                    b.ToTable("FormFieldResults");
                });

            modelBuilder.Entity("FormBuilderDB.Models.FormsDatum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FieldQuestion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Fieldtype")
                        .HasColumnType("int");

                    b.Property<bool>("IsMandatory")
                        .HasColumnType("bit");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<int>("SubFormId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubFormId");

                    b.ToTable("FormsData");
                });

            modelBuilder.Entity("FormBuilderDB.Models.MainForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfResponses")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("MainForms");
                });

            modelBuilder.Entity("FormBuilderDB.Models.Response", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateOfResponse")
                        .HasColumnType("datetime2");

                    b.Property<int>("MainFormId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MainFormId");

                    b.ToTable("Responses");
                });

            modelBuilder.Entity("FormBuilderDB.Models.SubForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MainFormId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MainFormId");

                    b.ToTable("SubForms");
                });

            modelBuilder.Entity("FormBuilderDB.Models.FormFieldResult", b =>
                {
                    b.HasOne("FormBuilderDB.Models.FormsDatum", "FormData")
                        .WithMany()
                        .HasForeignKey("FormDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FormBuilderDB.Models.Response", "ResponseNavigation")
                        .WithMany()
                        .HasForeignKey("ResponseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FormData");

                    b.Navigation("ResponseNavigation");
                });

            modelBuilder.Entity("FormBuilderDB.Models.FormsDatum", b =>
                {
                    b.HasOne("FormBuilderDB.Models.SubForm", "SubForm")
                        .WithMany()
                        .HasForeignKey("SubFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubForm");
                });

            modelBuilder.Entity("FormBuilderDB.Models.Response", b =>
                {
                    b.HasOne("FormBuilderDB.Models.MainForm", "MainForm")
                        .WithMany()
                        .HasForeignKey("MainFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MainForm");
                });

            modelBuilder.Entity("FormBuilderDB.Models.SubForm", b =>
                {
                    b.HasOne("FormBuilderDB.Models.MainForm", "MainForm")
                        .WithMany()
                        .HasForeignKey("MainFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MainForm");
                });
#pragma warning restore 612, 618
        }
    }
}
